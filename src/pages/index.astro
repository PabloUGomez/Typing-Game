---
import Layout from './layouts/Layout.astro'
import Quote from './icons/Quote.astro'
import Time from './icons/Time.astro'
import Words from './icons/Words.astro'
---

<Layout title='Typing Game'>
  <main class='text-white flex flex-col items-center h-screen overflow-hidden'>
    <header
      class='flex justify-center items-center bg-gray/10 rounded-md py-2 px-4 text-gray text-xs md:text-base mt-6'
    >
      <nav>
        <ul class='flex gap-x-6'>
          <li>
            <button class='button-time selected flex gap-x-1 items-center'
              ><Time />time</button
            >
          </li>
          <li>
            <button class='button-words flex gap-x-1 items-center'
              ><Words />words</button
            >
          </li>
          <li>
            <button class='button-quote flex gap-x-1 items-center'
              ><Quote />quote</button
            >
          </li>
        </ul>
      </nav>
      <span class='spacer rounded-md mx-4'></span>
      <span class='time-options'>
        <ul class='flex gap-x-4'>
          <li id='time-15'>15</li>
          <li id='time-30' class='selected'>30</li>
          <li id='time-60'>60</li>
          <li id='time-120'>120</li>
        </ul>
      </span>
      <span>
        <ul class='gap-x-4 hidden word-options'>
          <li id='word-10'>10</li>
          <li id='word-25'>25</li>
          <li id='word-50' class='selected'>50</li>
          <li id='word-100'>100</li>
        </ul>
      </span>
      <span>
        <ul class='gap-x-3 hidden quote-options'>
          <li id='all-quote'>all</li>
          <li id='short-quote'>short</li>
          <li id='medium-quote' class='selected'>medium</li>
          <li id='long-quote'>long</li>
        </ul>
      </span>
    </header>
    <button
      id='restart-button'
      class='rounded-md px-4 py-2 hover:bg-gray bg-gray/10 shadow-lg w-32 mt-6'
      >Start</button
    >
    <section
      id='game'
      class='flex xl:text-2xl 2xl:mt-16 text-sm mt-6 max-w-5xl mx-10 lg:text-xl lg:mt-10 xs:mt-32 sm:mx-32 sm:font-bold'
    >
      <span class='h-52 flex flex-col justify-center w-full'
        ><time class='text-yellow'></time>
        <span class='flex justify-center w-full'>
          <p class='font-medium gap-x-2 flex flex-wrap m-0 items-center'></p>
        </span>
      </span>
      <input autofocus class='-z-50 opacity-0 pointer-events-none' />
      <div class='flex justify-center gap-2 my-2 w-full'>
        <kbd class='kbd'>q</kbd>
        <kbd class='kbd'>w</kbd>
        <kbd class='kbd'>e</kbd>
        <kbd class='kbd'>r</kbd>
        <kbd class='kbd'>t</kbd>
        <kbd class='kbd'>y</kbd>
        <kbd class='kbd'>u</kbd>
        <kbd class='kbd'>i</kbd>
        <kbd class='kbd'>o</kbd>
        <kbd class='kbd'>p</kbd>
      </div>
      <div class='flex justify-center gap-2 my-2 w-full'>
        <kbd class='kbd'>a</kbd>
        <kbd class='kbd'>s</kbd>
        <kbd class='kbd'>d</kbd>
        <kbd class='kbd'>f</kbd>
        <kbd class='kbd'>g</kbd>
        <kbd class='kbd'>h</kbd>
        <kbd class='kbd'>j</kbd>
        <kbd class='kbd'>k</kbd>
        <kbd class='kbd'>l</kbd>
      </div>
      <div class='flex justify-center gap-2 my-2 w-full'>
        <kbd class='kbd'>z</kbd>
        <kbd class='kbd'>x</kbd>
        <kbd class='kbd'>c</kbd>
        <kbd class='kbd'>v</kbd>
        <kbd class='kbd'>b</kbd>
        <kbd class='kbd'>n</kbd>
        <kbd class='kbd'>m</kbd>
      </div>
    </section>
    <section
      id='results'
      class='w-2/3 hidden justify-center items-center mt-8 mx-32'
    >
      <samp
        class='text-left flex w-full font-bold uppercase text-yellow text-5xl items-center gap-x-12 justify-center'
      >
        <span class='flex gap-3'>
          <h2>wrp</h2>
          <h3></h3>
        </span>
        <span class='flex gap-3'>
          <h2>accuracy</h2>
          <h3 id='result-accuracy'></h3></span
        >
      </samp>
      <div
        class='chart-container flex justify-center items-center my-9'
        style='position: relative; height:50vh; width:100vw'
      >
        <canvas id='myChart'></canvas>
      </div>
    </section>
  </main>
</Layout>
<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>

<script>
  import Chart from 'chart.js/auto'
  import { words as INITIAL_WORDS } from './store/data.js'
  import { shortQuote } from './store/data.js'
  import { mediumQuote } from './store/data.js'
  import { longQuote } from './store/data.js'

  const time = document.querySelector('time')
  const paragraph = document.querySelector('p')
  const input = document.querySelector('input')
  const game = document.querySelector('#game') as HTMLElement
  const results = document.querySelector('#results') as HTMLElement
  const accuracy = results.querySelector('#result-accuracy')
  const wpm = results.querySelector('h3')
  const restartButton = document.querySelector('#restart-button')
  const keyboard = document.querySelectorAll('.kbd')
  let INITIAL_TIME = 30
  const header = document.querySelector('header')
  const buttonTime = document.querySelector('.button-time')
  const buttonWords = document.querySelector('.button-words')
  const buttonQuote = document.querySelector('.button-quote')
  const timeOptions = document.querySelector('.time-options')
  const wordOptions = document.querySelector('.word-options')
  const quoteOptions = document.querySelector('.quote-options')
  const time15 = document.querySelector('#time-15')
  const time30 = document.querySelector('#time-30')
  const time60 = document.querySelector('#time-60')
  const time120 = document.querySelector('#time-120')
  const word10 = document.querySelector('#word-10')
  const word25 = document.querySelector('#word-25')
  const word50 = document.querySelector('#word-50')
  const word100 = document.querySelector('#word-100')
  const allQuote = document.querySelector('#all-quote')
  const shortQuoteEl = document.querySelector('#short-quote')
  const mediumQuoteEl = document.querySelector('#medium-quote')
  const longQuoteEl = document.querySelector('#long-quote')

  let words = [...INITIAL_WORDS]
  words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 50)
  let currentTime = 0

  startGame()
  initEvents()

  buttonTime.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    restartButton.classList.remove('opacity-0')
    time.classList.remove('hidden')
    buttonTime.classList.add('selected')
    buttonWords.classList.remove('selected')
    buttonQuote.classList.remove('selected')
    timeOptions.classList.remove('hidden')
    timeOptions.classList.add('flex')
    wordOptions.classList.add('hidden')
    quoteOptions.classList.add('hidden')
    time30.dispatchEvent(new Event('click'))
    startGame()
  })

  time15.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    time15.classList.add('selected')
    time30.classList.remove('selected')
    time60.classList.remove('selected')
    time120.classList.remove('selected')
    INITIAL_TIME = 15
    startGame()
  })
  time30.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    time30.classList.add('selected')
    time15.classList.remove('selected')
    time60.classList.remove('selected')
    time120.classList.remove('selected')
    INITIAL_TIME = 30
    startGame()
  })
  time60.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    time60.classList.add('selected')
    time15.classList.remove('selected')
    time30.classList.remove('selected')
    time120.classList.remove('selected')
    INITIAL_TIME = 60
    startGame()
  })
  time120.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    time120.classList.add('selected')
    time15.classList.remove('selected')
    time30.classList.remove('selected')
    time60.classList.remove('selected')
    INITIAL_TIME = 120
    startGame()
  })

  buttonWords.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    restartButton.classList.add('opacity-0')
    buttonWords.classList.add('selected')
    buttonTime.classList.remove('selected')
    buttonQuote.classList.remove('selected')
    wordOptions.classList.remove('hidden')
    wordOptions.classList.add('flex')
    timeOptions.classList.add('hidden')
    quoteOptions.classList.add('hidden')
    time.classList.add('hidden')
    word50.dispatchEvent(new Event('click'))
    startTimer('clear')
  })
  word10.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    word10.classList.add('selected')
    word25.classList.remove('selected')
    word50.classList.remove('selected')
    word100.classList.remove('selected')
    INITIAL_TIME = 999
    words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 10)
    startGame()
  })
  word25.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    word25.classList.add('selected')
    word10.classList.remove('selected')
    word50.classList.remove('selected')
    word100.classList.remove('selected')
    INITIAL_TIME = 999
    words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 25)
    startGame()
  })
  word50.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    word50.classList.add('selected')
    word10.classList.remove('selected')
    word25.classList.remove('selected')
    word100.classList.remove('selected')
    INITIAL_TIME = 999
    words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 50)
    startGame()
  })
  word100.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    word100.classList.add('selected')
    word10.classList.remove('selected')
    word25.classList.remove('selected')
    word50.classList.remove('selected')
    INITIAL_TIME = 999
    words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 100)
    startGame()
  })

  buttonQuote.addEventListener('click', () => {
    buttonQuote.classList.add('selected')
    buttonTime.classList.remove('selected')
    buttonWords.classList.remove('selected')
    quoteOptions.classList.remove('hidden')
    quoteOptions.classList.add('flex')
    timeOptions.classList.add('hidden')
    restartButton.classList.add('opacity-0')
    time.classList.add('hidden')
    wordOptions.classList.add('hidden')
    mediumQuoteEl.dispatchEvent(new Event('click'))
    startTimer('clear')
  })
  allQuote.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    shortQuoteEl.classList.add('selected')
    mediumQuoteEl.classList.add('selected')
    longQuoteEl.classList.add('selected')
    const allQuote = shortQuote.concat(mediumQuote, longQuote)
    words = allQuote[Math.floor(Math.random() * (allQuote.length - 0))].split(' ') 
    console.log('words', words)
    startGame()
    INITIAL_TIME = 999
  })
  shortQuoteEl.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    shortQuoteEl.classList.add('selected')
    mediumQuoteEl.classList.remove('selected')
    longQuoteEl.classList.remove('selected')
    words =
      shortQuote[Math.floor(Math.random() * (shortQuote.length - 0))].split(' ')      
    startGame()
    INITIAL_TIME = 999
  })
  mediumQuoteEl.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    mediumQuoteEl.classList.add('selected')
    shortQuoteEl.classList.remove('selected')
    longQuoteEl.classList.remove('selected')
    words = mediumQuote[Math.floor(Math.random() * (mediumQuote.length - 0))].split(' ') 
    startGame()
    INITIAL_TIME = 999
  })
  longQuoteEl.addEventListener('click', () => {
    restartButton.textContent = 'Start'
    longQuoteEl.classList.add('selected')
    shortQuoteEl.classList.remove('selected')
    mediumQuoteEl.classList.remove('selected')
    words = longQuote[Math.floor(Math.random() * (longQuote.length - 0))].split(' ') 
    INITIAL_TIME = 999
    startGame()
  })

  restartButton.addEventListener('click', () => {
    game.style.display = 'block'
    results.style.display = 'none'
    if (restartButton.textContent === 'Start') {
      startTimer('init')
      restartButton.textContent = 'Restart'
      return
    }
    if (restartButton.textContent === 'Try again') {
      header.style.display = 'flex'
      restartButton.textContent = 'Start'
      if (buttonWords.classList.contains('selected')) {
        restartButton.classList.add('opacity-0')
        wordOptions
          .querySelector('li.selected')
          .dispatchEvent(new Event('click'))
      }
      if (buttonQuote.classList.contains('selected')) {
        restartButton.classList.add('opacity-0')
        quoteOptions
          .querySelector('li.selected')
          .dispatchEvent(new Event('click'))
      }
      startTimer('clear')
      startGame()
      return
    }
    if (restartButton.textContent === 'Restart') {
      startTimer('clear')
      startGame()
      return
    }
  })

  function startGame() {
    if (INITIAL_TIME != 999) {
      currentTime = INITIAL_TIME
      time.textContent = currentTime.toString()
      words = INITIAL_WORDS.toSorted(() => Math.random() - 0.5).slice(0, 50)
    }

    input.value = ''
    paragraph.innerHTML = words
      .map((word) => {
        const letters = word.split('')

        return `<word>
        ${letters.map((letter) => `<letter>${letter}</letter>`).join('')}
      </word>`
      })
      .join('')

    const firstWord = document.querySelector('word')
    firstWord.classList.add('active')
    firstWord.querySelector('letter').classList.add('active')
  }

  function startTimer(action) {
    const wpr = []
    const intervalId = setInterval(() => {
      if (restartButton.textContent === 'Start') {
        clearInterval(intervalId)
        return
      }
      if (action === 'init') {
        let wordsInSecond = 0
        time.textContent = currentTime.toString()
        const lettersCorrectNotInChart = paragraph.querySelectorAll(
          'letter.correct:not(.in-chart)'
        ).length
        wordsInSecond = lettersCorrectNotInChart
        wpr.push(wordsInSecond * 10)
        if (currentTime <= 0 || INITIAL_TIME === 0) {
          gameOver(wpr)
          clearInterval(intervalId)
          restartButton.textContent = 'Try again'
        }

        paragraph.querySelectorAll('letter.correct').forEach((element) => {
          element.classList.add('in-chart')
        })
        currentTime--
        console.log('wpr', wpr)
      }
    }, 1000)
  }

  function initEvents() {
    document.addEventListener('keydown', (event) => {
      input.focus()
    })
    input.addEventListener('keydown', onKeyDown)
    input.addEventListener('keyup', onKeyUp)
  }

  function onKeyUp(event) {
    const { key } = event
    const paragraphArray = [...paragraph.querySelectorAll('letter')]
    const lastLetter = paragraphArray[paragraphArray.length - 1]
    if (restartButton.textContent === 'Start') {
      restartButton.dispatchEvent(new Event('click'))
    }

    keyboard.forEach((kbd) => {
      kbd.classList.remove('clicked')
      if (kbd.textContent === key) {
        kbd.classList.add('clicked')
      }
    })
    const currentWord = document.querySelector('word.active')
    const currentLetter = currentWord.querySelector('letter.active')

    const wordLength = currentWord.textContent.trim()
    input.maxLength = wordLength.length

    const allLetters = currentWord.querySelectorAll('letter')

    allLetters.forEach((letter) =>
      letter.classList.remove('correct', 'incorrect')
    )

    input.value.split('').forEach((char, index) => {
      const letter = allLetters[index]
      const letterToCheck = wordLength[index]

      const isCorrect = char === letterToCheck
      const classToAdd = isCorrect ? 'correct' : 'incorrect'
      isCorrect && letter.classList.remove('marked')
      letter.classList.add(classToAdd)
    })

    currentLetter.classList.remove('active', 'is-last')
    const inputLength = input.value.length
    const nextActiveLetter = allLetters[inputLength]

    if (nextActiveLetter) {
      nextActiveLetter.classList.add('active')
    } else {
      currentLetter.classList.add('active', 'is-last')
    }
    if (
      lastLetter.classList.contains('correct') ||
      lastLetter.classList.contains('incorrect') ||
      lastLetter.classList.contains('marked')
    ) {
      INITIAL_TIME = 0
    }
  }

  function onKeyDown(event) {
    const currentWord = document.querySelector('word.active')
    const currentLetter = currentWord.querySelector('letter.active')
    const { key } = event

    if (key === ' ') {
      event.preventDefault()

      const nextWord = currentWord.nextElementSibling
      const nextLetter = nextWord.querySelector('letter')

      currentWord.classList.remove('active', 'marked')
      currentLetter.classList.remove('active')
      currentWord.querySelectorAll('letter:not(.correct)').forEach((el) => {
        el.classList.add('marked')
      })

      nextWord.classList.add('active')
      nextLetter.classList.add('active')

      input.value = ''

      const hasMissedLetters =
        currentWord.querySelectorAll('letter:not(.correct)').length > 0
      const classToAdd = hasMissedLetters ? 'marked' : 'correct'
      currentWord.classList.add(classToAdd)
    }

    if (key === 'Backspace') {
      const prevWord = currentWord.previousElementSibling
      const prevLetter = currentLetter.previousElementSibling
      const wordMarked = paragraph.querySelector('word.marked')

      if (!prevWord && !prevLetter) {
        event.preventDefault()
        return
      }

      if (wordMarked && !prevLetter) {
        event.preventDefault()
        prevWord.classList.remove('marked')
        prevWord.classList.add('active')

        const letterToGo = prevWord.querySelector('letter:last-child')
        currentLetter.classList.remove('active')
        letterToGo.classList.add('active')

        input.value = [
          ...prevWord.querySelectorAll('letter.correct, letter.incorrect'),
        ]
          .map((el) => {
            return el.classList.contains('correct') ? el.textContent : '`'
          })
          .join('')
      }
    }
  }

  function gameOver(wpr) {
    header.style.display = 'none'
    game.style.display = 'none'
    results.style.display = 'flex'
    restartButton.classList.remove('opacity-0')

    const correctWords = paragraph.querySelectorAll('word.correct').length
    const correctLetters = paragraph.querySelectorAll('letter.correct').length
    const markedLetters = [
      ...paragraph.querySelectorAll('letter:not(.incorrect)'),
    ].filter((el) => el.classList.contains('marked')).length

    const incorrectLetters =
      paragraph.querySelectorAll('letter.incorrect').length
    const totalLetters = correctLetters + incorrectLetters + markedLetters

    const accuracyValue = totalLetters > 0 ? correctLetters / totalLetters : 0
    const wpmValue = Math.round(correctWords * (60 / wpr.length))
    console.log(wpr.length)

    let chartStatus = Chart.getChart('myChart')
    if (chartStatus != undefined) {
      chartStatus.destroy()
    }
    const ctx = document.getElementById('myChart') as HTMLCanvasElement
    const labels = []
    for (let i = 0; i < wpr.length; i++) {
      labels.push(i)
    }

    new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'Words per minute',
            data: wpr,
            borderWidth: 1,
          },
        ],
      },
      options: {
        animations: {
          tension: {
            duration: 1000,
            easing: 'linear',
            from: 1,
            to: 0,
            loop: true,
          },
        },
        scales: {
          y: {
            // defining min and max so hiding the dataset does not change scale range
            min: 0,
            max: 70,
          },
        },
        layout: {
          padding: 5,
        },
      },
    })
    accuracy.textContent = `${(accuracyValue * 100).toFixed(2)}%`
    wpm.textContent = wpmValue.toString()
  }
</script>

<style is:global>
  :root {
    color-scheme: light dark;
    --green: #00b755;
    --yellow: #daaf38;
    --red: #ca4754;
    --black: #222;
    --gray: #999;
  }
  #game {
    display: block;
  }
  #results {
    display: none;
    flex-direction: column;
  }
  header li {
    cursor: pointer;
    &:hover {
      color: rgb(255, 255, 255, 0.9);
    }
  }
  .selected {
    color: var(--yellow);
  }
  .spacer {
    height: 100%;
    width: 3px;
    background-color: var(--gray);
    opacity: 0.5;
  }
  word {
    height: fit-content;
    border-bottom: 1.5px solid transparent;
    transition: border-color 0.3s ease-in-out;
    &.marked {
      border-bottom: solid 2px var(--red);
    }
  }
  letter {
    height: fit-content;
    color: var(--gray);
    position: relative;
    &.active::before {
      content: '|';
      color: var(--yellow);
      position: absolute;
      left: -62%;
      animation: 1s blink infinite ease-in-out;
    }
    &.is-last::before {
      left: 65%;
    }
    &.correct {
      color: var(--green);
    }
    &.incorrect {
      color: var(--red);
    }
  }
  .clicked {
    animation: pulse 0.7s ease-in-out;
  }

  .kbd {
    min-width: 4rem;
    min-height: 4rem;
  }
  @media screen and (max-width: 1200px) {
    .kbd {
      min-width: 3rem;
      min-height: 3rem;
    }
  }

  @media screen and (max-width: 600px) {
    .kbd {
      display: none;
    }
  }

  @keyframes pulse {
    0% {
      background-color: var(--black);
    }
    50% {
      background-color: var(--gray);
    }
    100% {
      background-color: var(--black);
    }
  }
  @keyframes blink {
    0%,
    25% {
      opacity: 1;
    }
    75% {
      opacity: 0;
    }
  }
</style>
